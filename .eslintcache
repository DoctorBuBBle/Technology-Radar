[{"/home/doctorbubble/Documents/Projects/technology-radar/src/index.js":"1","/home/doctorbubble/Documents/Projects/technology-radar/src/App.js":"2","/home/doctorbubble/Documents/Projects/technology-radar/src/reportWebVitals.js":"3","/home/doctorbubble/Documents/Projects/technology-radar/src/components/TechnologyRadar.js":"4","/home/doctorbubble/Documents/Projects/technology-radar/src/components/utility.js":"5","/home/doctorbubble/Documents/Projects/technology-radar/src/components/Ring.js":"6","/home/doctorbubble/Documents/Projects/technology-radar/src/components/Entry.js":"7"},{"size":500,"mtime":1610978507440,"results":"8","hashOfConfig":"9"},{"size":611,"mtime":1611164575729,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1610977569997,"results":"11","hashOfConfig":"9"},{"size":4087,"mtime":1611164779243,"results":"12","hashOfConfig":"9"},{"size":621,"mtime":1611157267955,"results":"13","hashOfConfig":"9"},{"size":5930,"mtime":1611164649308,"results":"14","hashOfConfig":"9"},{"size":4004,"mtime":1611221643300,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"f390qd",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/doctorbubble/Documents/Projects/technology-radar/src/index.js",[],["32","33"],"/home/doctorbubble/Documents/Projects/technology-radar/src/App.js",[],"/home/doctorbubble/Documents/Projects/technology-radar/src/reportWebVitals.js",[],"/home/doctorbubble/Documents/Projects/technology-radar/src/components/TechnologyRadar.js",["34","35"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Ring from \"./Ring\";\nimport Entries, { EntryShape } from \"./Entry\";\nimport { getClassName } from \"./utility\";\n\nconst DEFAULTS = {\n  SEGMENT: {\n    fontColor: \"#fff\",\n    color: \"#6011D9\",\n  },\n  RING: {\n    color: \"#6011D9\",\n  },\n  ENTRY: {\n    isNew: false,\n    moved: 0,\n  },\n};\n\nconst TECHNOLOGY_RADAR = (() => {\n  const technologyRadarRadius = 500;\n\n  return Object.freeze({\n    radian: 2 * Math.PI,\n    radius: technologyRadarRadius,\n    diameter: technologyRadarRadius * 2,\n    area: Math.PI * technologyRadarRadius ** 2,\n    x: technologyRadarRadius,\n    y: technologyRadarRadius,\n  });\n})();\n\nconst getSegmentConfig = (entries, rings, segment, index, segments) => {\n  // divide the radian of the technology radar by the number of segments to get the radian each segment has\n  const radian = TECHNOLOGY_RADAR.radian / segments.length;\n  // the radianToEnd is the radian to the last point of the segment\n  const radianToEnd = radian * (index + 1);\n  // the radianToStart is the radian to the first point of the segment\n  const radianToStart = radianToEnd - radian;\n\n  const filterBySegment = (entry) => entry.segment === segment.label;\n\n  return {\n    ...DEFAULTS.SEGMENT,\n    ...segment,\n    radian,\n    radianToEnd,\n    radianToStart,\n    rings: rings.map(getRingConfig.bind(this, entries.filter(filterBySegment))),\n  };\n};\n\nconst getRingConfig = (entries, ring, index, rings) => {\n  const ringsArea = TECHNOLOGY_RADAR.area / rings.length;\n  const area = (index + 1) * ringsArea;\n  const radius = Math.sqrt(area / Math.PI);\n\n  const previousRingArea = index * ringsArea;\n  const previousRingRadius = Math.sqrt(previousRingArea / Math.PI);\n  const space = {\n    radius: radius - previousRingRadius,\n  };\n  const radiusInTheCenter = radius - space.radius / 2;\n\n  const filterByRing = (entry) => entry.ring === ring.label;\n\n  return {\n    ...DEFAULTS.RING,\n    ...ring,\n    space,\n    radius,\n    radiusInTheCenter,\n    entries: entries.filter(filterByRing),\n  };\n};\n\nconst TechnologyRadar = ({ entryRadius, entries, rings, segments }) => {\n  const radar = segments\n    .map(getSegmentConfig.bind(this, entries, rings))\n    .map((segment) => (\n      <g className={getClassName(segment)} key={segment.label}>\n        {segment.rings\n          .map((ring) => (\n            <Ring\n              key={segment.label + ring.label}\n              offset={TECHNOLOGY_RADAR}\n              ring={ring}\n              segment={segment}\n              entryRadius={entryRadius}\n            />\n          ))\n          // Reverse the array to make the rings closer to the center\n          // lie on top of the rings further away from the center.\n          .reverse()}\n      </g>\n    ));\n\n  return (\n    <svg viewBox=\"-5 -5 1010 1010\" xmlns=\"http://www.w3.org/2000/svg\">\n      {radar}\n    </svg>\n  );\n};\n\nTechnologyRadar.propTypes = {\n  entryRadius: PropTypes.number,\n  segments: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      className: PropTypes.string,\n    })\n  ),\n  rings: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      color: PropTypes.string,\n      stroke: PropTypes.string,\n      className: PropTypes.string,\n    })\n  ),\n  entries: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      title: PropTypes.string,\n      ring: PropTypes.string.isRequired,\n      segment: PropTypes.string.isRequired,\n      isNew: PropTypes.bool,\n      moved: PropTypes.bool,\n    })\n  ).isRequired,\n};\n\nTechnologyRadar.defaultProps = {\n  entryRadius: 10,\n  segments: [\n    { label: \"Techniques\", color: \"#3DB5BE\" },\n    { label: \"Tools\", color: \"#83AD78\" },\n    { label: \"Platforms\", color: \"#E88744\" },\n    { label: \"Languages & Frameworks\", color: \"#8D2145\" },\n  ],\n  rings: [\n    { label: \"Adopt\", color: \"#808080\" },\n    { label: \"Trial\", color: \"#B3B3B3\" },\n    { label: \"Assess\", color: \"#CCCCCC\" },\n    { label: \"Hold\", color: \"#F2F2F2\" },\n  ],\n};\n\nexport default TechnologyRadar;\n","/home/doctorbubble/Documents/Projects/technology-radar/src/components/utility.js",[],"/home/doctorbubble/Documents/Projects/technology-radar/src/components/Ring.js",[],"/home/doctorbubble/Documents/Projects/technology-radar/src/components/Entry.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":4,"column":8,"nodeType":"42","messageId":"43","endLine":4,"endColumn":15},{"ruleId":"40","severity":1,"message":"44","line":4,"column":19,"nodeType":"42","messageId":"43","endLine":4,"endColumn":29},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'Entries' is defined but never used.","Identifier","unusedVar","'EntryShape' is defined but never used.","no-global-assign","no-unsafe-negation"]